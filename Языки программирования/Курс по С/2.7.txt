Задания отделены между собой линиями из "#"

/*
struct list {
    int64_t value;
    struct list* next;
};
*/
void print_int64(int64_t i);


/* Запустить функцию f на каждом элементе списка  */
void list_foreach( const struct list* l, void (f)(int64_t)) {
    if(l != NULL){
    while(l -> next != NULL){
        f(l -> value);
        l = l -> next;
    }
    f(l -> value);
    }
}

/* Вывести список с помощью foreach и дополнительной функции */
void list_print(const struct list* l) {
    list_foreach(l, print_int64_space);
}

############################################

/*
struct list {
    int64_t value;
    struct list* next;
};
*/

/* Изменить каждый элемент списка с помощью функции f  */
void list_map_mut(struct list* l, int64_t (f) (int64_t))  {
    if(l != NULL){
        while(l -> next != NULL){
            l -> value = f(l -> value);
            l = l -> next;
        }
        l -> value = f(l -> value);
    }
}


static int64_t triple( int64_t x ) { return x * 3; }

/* Используя list_map_mut умножьте все элементы списка на 3 */
void list_triple( struct list* l ) { 
    list_map_mut(l, triple);
}

#######################################################################

/*
struct list {
    int64_t value;
    struct list* next;
};
*/
/* Вы можете пользоваться следующими функциями */
void print_int64(int64_t i);
struct list* node_create( int64_t value );



/*  Создать новый список, в котором каждый элемент получен из соответствующего
    элемента списка l путём применения функции f */
struct list* list_map(const struct list* l, int64_t (f) (int64_t))  {
    if (l == NULL)
        return NULL;
    struct list* list = node_create(f(l->value));
    struct list* last = list;
    
    const struct list * iter = l->next;
    while( iter != NULL){
        struct list* node = node_create(f(iter->value));
        
        last->next = node;
        last = last->next;
        
        iter = iter->next;
    }
    
    return list;
}
int64_t copy_value(int64_t value){
    return value;
}

struct list* list_copy(const struct list * l ) {
    return list_map(l, copy_value);
}

int64_t abs_val(int64_t value){
    if(value < 0){
        return (-1)*value;
    }
    return value;
}

struct list* list_abs(const struct list* l ) {
    return list_map(l, abs_val);
}

##################################################################

/*
struct list {
    int64_t value;
    struct list* next;
};
*/
/* Вы можете пользоваться следующими функциями */
void print_int64(int64_t i);
struct list* node_create( int64_t value );



/*  Создать новый список, в котором каждый элемент получен из соответствующего
    элемента списка l путём применения функции f */
struct list* list_map(const struct list* l, int64_t (f) (int64_t))  {
    if (l == NULL)
        return NULL;
    struct list* list = node_create(f(l->value));
    struct list* last = list;
    
    const struct list * iter = l->next;
    while( iter != NULL){
        struct list* node = node_create(f(iter->value));
        
        last->next = node;
        last = last->next;
        
        iter = iter->next;
    }
    
    return list;
}
int64_t copy_value(int64_t value){
    return value;
}

struct list* list_copy(const struct list * l ) {
    return list_map(l, copy_value);
}

int64_t abs_val(int64_t value){
    if(value < 0){
        return (-1)*value;
    }
    return value;
}

struct list* list_abs(const struct list* l ) {
    return list_map(l, abs_val);
}


##################################################################

/*
struct list {
    int64_t value;
    struct list* next;
};
*/
void print_int64(int64_t i);

struct list* node_create( int64_t value );
void list_destroy( struct list* list );


/*  Сгенерировать список длины sz с помощью значения init и функции f
 Результат: init, f(init), f(f(init)), ... */
struct list* list_iterate( int64_t init, size_t sz, int64_t(f)(int64_t)) {
    if(sz == 0){
        return NULL;
    }
    struct list* list = node_create(init);
    struct list* last = list;
    for(size_t i = 0; i < (sz - 1); i++){
        init = f(init);
        struct list* node = node_create(init);
        last -> next = node;
        last = last -> next;
    }
    return list;
}

##############################################################################



