Задания отделены между собой линиями из "#"


// упакованное число 42 выводится как "Some 42"
// Ошибка выводится как None
void maybe_int64_print( struct maybe_int64 i ) {
    if(i.valid){
        printf("Some %" PRId64, i.value);
    }else{
        printf("None");    
    }
}

// Если обе упаковки содержат ошибку, то результат ошибка
// Если ровно одна упаковка содержит ошибку, то результат -- вторая
// Если обе упаковки содержат число, то результат это минимум из двух чисел.
struct maybe_int64 maybe_int64_min(struct maybe_int64 a, struct maybe_int64 b) {
    if((!a.valid)&&(!b.valid)){
        return none_int64;
    }
    else if((!a.valid)){
        return b;
    }
    else if((!b.valid)){
        return a;
    }
    else{
        if(a.value < b.value){
            return a;
        }else{
            return b;
        }
    }
}

#############################################################################################

ОШИБКА В КОММЕНТАРИИ!!!!!

/*

struct maybe_int64 {
  int64_t value;
  bool valid;
};

struct maybe_int64 some_int64(int64_t i) {
  return (struct maybe_int64) { i, true };
}

const struct maybe_int64 none_int64 = { 0 };
*/

size_t read_size() { size_t sz = 0; scanf("%zu", &sz); return sz; }

struct array_int {
  int64_t* data;
  size_t size;
};

void array_int_fill( int64_t* array, size_t sz ) {
  for( size_t i = 0; i < sz; i = i + 1 ) {
    array[i] = read_int64();
  }
}

struct array_int array_int_read() {
  const size_t size = read_size();
  if (size > 0) {
    int64_t* array = malloc( sizeof(int64_t) * size);
    array_int_fill( array, size );
    return (struct array_int) { .data = array, .size = size };
  }
  else return (struct array_int) {0};
}

// возвращает ошибку если индекс за пределами массива
struct maybe_int64 array_int_get( struct array_int a, size_t i ) {
    if(i<a.size){
        return (struct maybe_int64){.value = a.data[i], .valid = true};
    }else{
        return (struct maybe_int64){0};
    }
}

// возвращает false если индекс за пределами массива
bool array_int_set( struct array_int a, size_t i, int64_t value ) {
    if(a.size > i){
        a.data[i] = value;
        return true;
    }else{
        return false;
    }
}

void array_int_print( struct array_int array ) {
  for (size_t i = 0; i < array.size; i = i + 1) {
    printf("%" PRId64 " " , array_int_get( array, i).value);
  }
}

struct maybe_int64 array_int_min( struct array_int array ) {
    int64_t min_val = 0;
    if(array.size != 0){
    for(size_t i = 0; i < array.size; i++){
        if(i == 0){
            min_val = array.data[i];
        }else if(min_val > array.data[i]){
            min_val = array.data[i];
        }
    }
    return (struct maybe_int64){.value = min_val, .valid = true};
    }else{
        return (struct maybe_int64) {0};
    }
}

void array_int_free( struct array_int a ) { 
    if ( a.size > 0 ) {
        free(a.data); 
        a.size = 0;
    } 
}

##############################################################################

/* Вы можете пользоваться этими функциями из предыдущих заданий */
size_t read_size() { size_t i; scanf("%zu", &i); return i; }//прочитать размер строки

void array_int_fill( int64_t* array, size_t sz );//заполнить одномерный массив

struct array_int array_int_read();//выделяет место под одномерный массив и заполняет его
struct maybe_int64 array_int_get( struct array_int a, size_t i );//выдаёт элемент из массива по индексу
bool array_int_set( struct array_int a, size_t i, int64_t value );//кладёт элемент по индексу, если вне индекса - false
void array_int_print( struct array_int array );//печатает одномерный массив
struct maybe_int64 array_int_min( struct array_int array );//ищет минимальный элемент в одномерном массиве
void array_int_free( struct array_int a );//очищает память после одномерного массива(строки)

void array_int_normalize( struct array_int array, int64_t m ) {
  for (size_t i = 0; i < array.size; i = i + 1) {//отнимает от всех элементов строки число
    array.data[i] = array.data[i] - m;
  }
}

/*  ---- maybe int[] ---- */

struct maybe_array_int {
  struct array_int value;
  bool valid;
};

struct maybe_array_int some_array_int(struct array_int array)
{//возвращает строку(массив) в виде части какой-то структуры.
  return (struct maybe_array_int) { array, true };
}
const struct maybe_array_int none_array_int = { {NULL, 0}, false };//значение для ошибки


/*  ---- int[][] ---- */

struct array_array_int {//структура для массива массивов
  struct array_int* data;
  size_t size;
};

/*  --- строки ---  */

struct maybe_array_int array_array_int_get_row( struct array_array_int a, size_t i ) {//
  if ( 0 <= i && i < a.size ) {
      return some_array_int( a.data[i] );//выдаётся элемент массива по индексу
  }
  else { return none_array_int; }
}

bool array_array_int_set_row( struct array_array_int a, size_t i, struct array_int value ) {
  if (0 <= i && i < a.size) {//кладётся строка в массив по индексу
    a.data[i] = value;
    return true;
  }
  else { return false; }
}

/*  --- get/set ---  */

struct maybe_int64 array_array_int_get( struct array_array_int a, size_t i, size_t j ) 
{//выдаётся элемент двумерного массива по индексу
    if(i >= 0 && j >= 0 && i < a.size && (a.data -> size)>j){
        struct array_int array = a.data[i];
        int64_t value = array.data[j];
        return (struct maybe_int64){.value = value, .valid = true};
    }else{
        return none_int64;
    }
}

bool array_array_int_set( struct array_array_int a, size_t i, size_t j, int64_t value ) 
{//кладётся элемент в двумерный массив по индексам
  if(i >= 0 && j >= 0 && i < a.size && (a.data -> size)>j)
  {
      a.data[i].data[j] = value;
      return true;
  }
  else
  {
      return false;
  }
}

/*  --- read/print ---  */

struct array_array_int array_array_int_read()
{//читается и заполняется массив массивов в виде структуры
    size_t rows = read_size();
    struct array_array_int array = {.size = rows, .data = malloc(sizeof(struct array_int)*rows)};
    for(size_t i = 0; i < rows; i++)
    {
        array.data[i] = array_int_read();
        //array_array_int_set_row(array, i, str);
    }
    return array;
}


void array_array_int_print( struct array_array_int array)
{//печатается массив массивов, будучи структурой
    for(size_t i = 0; i < array.size; i++){
        array_int_print(array.data[i]);
        printf("\n");
    }
}


/*  --- min/normalize ---  */

// найти минимальный элемент в массиве массивов
struct maybe_int64 array_array_int_min( struct array_array_int array ) {
    int64_t min_val = 0;
    for(size_t i = 0; i < array.size; i++){
        for(size_t k = 0; k < array.data[i].size; k++){
            if(i == 0 && k==0){
                min_val = array.data[i].data[k];
            }else{
                if(min_val > array.data[i].data[k]){
                    min_val = array.data[i].data[k];
                }
            }
        }
    }
    return (struct maybe_int64){.value = min_val, .valid = true};
}

// вычесть из всех элементов массива массивов число m
void array_array_int_normalize( struct array_array_int array, int64_t m) {
  for (size_t i = 0; i < array.size; i = i + 1) {
    const struct maybe_array_int cur_row = array_array_int_get_row( array, i );
    if (cur_row.valid) {
         array_int_normalize( cur_row.value, m );
    }
  }
}

//освободить зарезервированную под массив массивов память
void array_array_int_free( struct array_array_int array ) {
    for(size_t i = 0; i < array.size; i++){
        array_int_free(array.data[i]);
    }
    free(array.data);
}


#########################################################################################################

/* Вы можете пользоваться следующими определениями:

struct maybe_int64 {int64_t value; bool valid;};
struct maybe_int64 some_int64(int64_t i);
const struct maybe_int64 none_int64 = { 0, false };
void maybe_int64_print( struct maybe_int64 i );


struct array_int {int64_t* data; size_t size;};
struct array_int array_int_create( size_t sz );
struct array_int array_int_create( size_t sz ) {
    return (struct array_int) { .data = malloc( sizeof( int64_t ) * sz ), .size = sz };
}
int64_t* array_int_last( struct array_int a );
struct maybe_int64 array_int_get( struct array_int a, size_t i );
bool array_int_set( struct array_int a, size_t i, int64_t value );
void array_int_print( struct array_int array );
void array_int_free( struct array_int* a );

*/

struct stack {
  size_t count;
  struct array_int data;
};

// Количество элементов в стеке
size_t stack_count(const struct stack* s){
    return s -> count;
}

// Создаем и деинициализируем стек
struct stack stack_create( size_t size ){
    return (struct stack) {.count = 0, .data = array_int_create(size)};
}
void stack_destroy( struct stack* s ){
    free(s -> data.data);
    s->count = 0;
}

// Стек полный
bool stack_is_full( const struct stack * s){
    if((s->count)==(s -> data.size)){
        return true;
    }
    return false;
}
// Стек пустой
bool stack_is_empty( const struct stack * s)
{
    if(s -> count == 0){
        return true;
    }
    return false;
}

// Поместить значение в стек
bool stack_push( struct stack* s, int64_t value ){
    if(!stack_is_full(s)){
        s -> data.data[s -> count] = value;
        s -> count += 1;
        return true;
    }
    return false;
}

// Вынуть значение с вершины стека. Может вернуть none_int64
struct maybe_int64 stack_pop( struct stack* s ){
    if(s-> count > 0){
        s -> count -= 1;
        return (struct maybe_int64){.value = (s -> data.data[(s -> count)]), .valid = true};
    }
    return none_int64;
}

void stack_print( const struct stack* s ) {
  for (size_t i = 0; i < stack_count( s ); i = i + 1 ) {
    print_int64( array_int_get( s->data, i).value );
    printf(" ");
  }
}

#########################################################################################################